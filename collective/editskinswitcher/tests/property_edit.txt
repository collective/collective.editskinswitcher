Preview the default skin via the edit skin
==========================================

Tests for new features by Ed Crewe, Internet Development (University of Bristol) August 2008

This test checks that changing the add preview tab properties switches the visibility in other tools and confirm it adds a tab, when logged in to the edit skin, via the browser. 
Do the same for the modified view option.

First, we must perform some setup of the test browser.

    >>> from Products.Five.testbrowser import Browser
    >>> portal_url = portal.absolute_url()
    >>> browser = Browser()

All our tests are to do with the edit skin interface so lets switch to it ...

    >>> from collective.editskinswitcher.tests.utils import TestRequest
    >>> from collective.editskinswitcher.tests.utils import FakeTraversalEvent
    >>> from collective.editskinswitcher.traversal import switch_skin
    >>> request = TestRequest(SERVER_URL='http://127.0.0.1')
    >>> event = FakeTraversalEvent(portal, request)
    >>> switch_skin(portal, event)
    >>> portal.getCurrentSkinName()
    'Plone Default'

Check we are in the edit skin via the browser

    >>> browser.open(portal_url + '/accessibility-info')
    >>> 'Monty Python' in browser.contents
    False

Now we need to login using the default user from PloneTestCase

    >>> from Products.PloneTestCase.setup import portal_owner, default_password
    >>> browser.open(portal_url)

We have the login portlet, so let's use that

    >>> browser.getControl(name='__ac_name').value = portal_owner
    >>> browser.getControl(name='__ac_password').value = default_password
    >>> browser.getControl(name='submit').click()

We check that we get the logged-in message

    >>> "You are now logged in" in browser.contents
    True


Now lets start our editskinswitcher specific edit skin tests 
------------------------------------------------------------

make sure we have switched on an edit skins preview tab in the properties 

    >>> from Products.CMFCore.utils import getToolByName
    >>> portal_props = getToolByName(portal, 'portal_properties')
    >>> editskin_props = portal_props.get('editskin_switcher')
    >>> editskin_props.add_preview_tab = True

Now simulate us doing this via the web by tripping its event handler

    >>> from collective.editskinswitcher.browser.interfaces import PropertiesModifiedEvent
    >>> from zope.event import notify
    >>> notify(PropertiesModifiedEvent(editskin_props))

See if the propertyActions event handler has done its work

    >>> a_tool = getToolByName(portal, 'portal_actions')
    >>> ptabs = getattr(a_tool,'object',None)
    >>> ptab = getattr(ptabs,'skinpreview',None)
    >>> ptab.getProperty('visible')
    True

Check we have the preview tab

    >>> browser.open(portal_url)
    >>> '@@preview' in browser.contents
    True

Lets switch it back and check again

    >>> editskin_props.add_preview_tab = False
    >>> notify(PropertiesModifiedEvent(editskin_props))
    >>> editskin_props.getProperty('add_preview_tab')
    False
    >>> ptab.getProperty('visible')
    False

Make sure we are still in the edit skin

    >>> switch_skin(portal, event)
    >>> portal.getCurrentSkinName()
    'Plone Default'

Confirm via a browser test that the preview tab is no longer there

    >>> browser.open(portal_url)
    >>> '@@preview' in browser.contents
    False

Now test preview as a modified view skin
---------------------------------------------

Switch it on

    >>> editskin_props.change_view_into_preview = True
    >>> notify(PropertiesModifiedEvent(editskin_props))
    >>> editskin_props.getProperty('change_view_into_preview')
    True

Check the editskinswitcher skins have been put in the edit skin

    >>> sk_tool = getToolByName(portal, 'portal_skins')
    >>> sk_tool.getSkinPath('Plone Default').find('editskinswitcher_content') > -1
    True

Make sure we are still in the edit skin

    >>> switch_skin(portal, event)
    >>> portal.getCurrentSkinName()
    'Plone Default'

Check that the view now has the preview iframe

    >>> browser.open(portal_url)
    >>> '</iframe>' in browser.contents
    True

Now lets turn this off again and confirm the edit skin has changed

    >>> editskin_props.change_view_into_preview = False
    >>> notify(PropertiesModifiedEvent(editskin_props))
    >>> sk_tool.getSkinPath('Plone Default').find('editskinswitcher_content') > -1
    False


Change back the skin to the default manually at the end of this test in case other tests expect it

    >>> portal.changeSkin('Monty Python Skin', TestRequest())

